<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Schema Operator</title><link>https://microsoft.github.io/azure-schema-operator/</link><description>Recent content on Azure Schema Operator</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://microsoft.github.io/azure-schema-operator/index.xml" rel="self" type="application/rss+xml"/><item><title>Contributing</title><link>https://microsoft.github.io/azure-schema-operator/contributing/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/contributing/contributing/</guid><description>Contributing to Azure Schema Operator # Developer setup (with VS Code) # This is the recommended setup, especially if you are using Windows as your development platform.
This repository contains a devcontainer configuration that can be used in conjunction with VS Code to set up an environment with all the required tools preinstalled.
If you want to use this:
Make sure you have installed the prerequisites to use Docker, including WSL if on Windows.</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/contributing/create-a-new-release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/contributing/create-a-new-release/</guid><description>Creating a new release of ASO v2 # Go to the releases page and draft a new release. In the tag dropdown, type the name of the new tag you&amp;rsquo;d like to create (it should match the pattern of previous releases tags, for example: v1.0.0-alpha.1). The release target should be main (the default). Use the GitHub &amp;ldquo;auto-generate release notes&amp;rdquo; button to generate a set of release notes to work with.</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/introduction/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/introduction/annotations/</guid><description>Annotations understood by the operator # Annotations specified by the user # Note that unless otherwise specified, allowed values are case sensitive and should be provided in lower case.
serviceoperator.azure.com/reconcile-policy # Specifies the reconcile policy to use. Allowed values are:
manage: The operator performs all actions as normal. This is the default if no annotation is specified. skip: All modification actions on the backing Azure resource are skipped.</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/introduction/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/introduction/authentication/</guid><description>Authentication in Azure Schema Operator # Azure Schema Operator supports two different styles of authentication today.
managed identity (via aad-pod-identity authentication) Service Principal Managed Identity (aad-pod-identity) # Prerequisites # An existing Azure Managed Identity. aad-pod-identity installed into your cluster. If you are running ASO on an Azure Kubernetes Service (AKS) cluster, you can instead use the integrated aad-pod-identity. First, set the following environment variables:</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/introduction/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/introduction/configuration/</guid><description>Configuration # Schema ConfigMap # SQL Server # The SQL SERVER configmap supports a few extra options:
sqlpackageOptions - a string of options (space seperated) to pass to the sqlpackage executable.</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/introduction/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/introduction/filter/</guid><description>Target Filter # The operator uses the TargetFilter struct to Filter and aquire execution targets. The semantics change a bit between the different db technologies to match common use patterns.
Although the general notions stay the same.
ClusterUris holds a list of clusters/servers/Eventhub namespaces. Create flag indicates if we should create the DB/schema/registry if missing. Regexp flag indicates if we should regard the filter values as regular expressions or exact match.</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/introduction/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/introduction/install/</guid><description>Installation Guide # This document will guide you through the installation and configuration process. The Schema-Operator needs a client account that can access the Azure Data Explorer clusters you wish to manage and as this is an Operator we need an AKS cluster.
Identity # Schema operator uses a managed identity (MSI) to access kusto resources. Please create a managed identity and assign administrative permissions for the operator to change the databases.</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/tutorials/eventhub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/tutorials/eventhub/</guid><description>Eventhub schema regitery tutorial # Creating the ConfigMap:
kubectl create configmap event-demo --from-literal templateName=&amp;#34;schemaop&amp;#34; --from-literal group=&amp;#34;testsgr&amp;#34; \ --from-file=schema=./docs/assets/avro-schema.json next we need to define a SchemaDeployment object that will reference the ConfigMap.
apiVersion: dbschema.microsoft.com/v1alpha1 kind: SchemaDeployment metadata: name: eventhub-schema-demo spec: type: eventhub applyTo: clusterUris: [&amp;#39;schematest.servicebus.windows.net&amp;#39;] failIfDataLoss: false failurePolicy: abort source: name: event-demo namespace: default and apply it via kubectl:
kubectl apply -f ./docs/assets/eventhub-schema-demo.yaml To demonstrate schema evolution, we will add a new field:</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/tutorials/kusto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/tutorials/kusto/</guid><description>Azure Data Explorer (ADX, AKA Kusto) Tutorial # In this short tutorial we will review the process of managing a schema, performing a change and rollback in the case of an error.
Pre-requisits # the tutorial assumes that the Schema operator is already installed with the appropriate permissions - if not, please see installation
Tutorial steps # We start by creating a KQL file following the delta-kusto instructions</description></item><item><title/><link>https://microsoft.github.io/azure-schema-operator/tutorials/sqlserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/azure-schema-operator/tutorials/sqlserver/</guid><description>SQL Server Tutorial # A tutorial for a simple scenario of a single db in a server with schema per tenant.
we assume MSI is used to authenticate (because it&amp;rsquo;s simpler :) )
we need to add the MSI as a user to the DB:
CREATE USER [dbset-operator-dataops-msi-erx-qds] FROM EXTERNAL PROVIDER; GO ALTER ROLE db_datareader ADD MEMBER [dbset-operator-dataops-msi-erx-qds]; ALTER ROLE db_datawriter ADD MEMBER [dbset-operator-dataops-msi-erx-qds]; ALTER ROLE db_owner ADD MEMBER [dbset-operator-dataops-msi-erx-qds]; GRANT EXECUTE TO [dbset-operator-dataops-msi-erx-qds] GO Creating the ConfigMap:</description></item></channel></rss>